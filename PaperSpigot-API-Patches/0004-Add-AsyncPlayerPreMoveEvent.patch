From 69cc225b86c596d3c96529481a9e76574d1ee053 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Thu, 10 Mar 2016 12:18:04 -0700
Subject: [PATCH] Add AsyncPlayerPreMoveEvent


diff --git a/src/main/java/net/techcable/tacospigot/event/entity/AsyncPlayerPreMoveEvent.java b/src/main/java/net/techcable/tacospigot/event/entity/AsyncPlayerPreMoveEvent.java
new file mode 100644
index 0000000..c5f146b
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/event/entity/AsyncPlayerPreMoveEvent.java
@@ -0,0 +1,73 @@
+package net.techcable.tacospigot.event.entity;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Called before a player moves.
+ * <p>May be called from any thread, including the main thread.</p>
+ * <p>No validation is performed on this move, and it may be cancelled later once the server processes the move.</p>
+ */
+public class AsyncPlayerPreMoveEvent extends Event implements Cancellable {
+    private final Player player;
+    private final Location from, to;
+
+    private boolean cancelled = false;
+
+    public AsyncPlayerPreMoveEvent(Player player, Location from, Location to) {
+        super(!Bukkit.isPrimaryThread());
+        this.player = player;
+        this.from = from;
+        this.to = to;
+    }
+
+    /**
+     * Get the player that moved.
+     * <p>Do not do any operations on this player that aren't safe.</p>
+     * @return the player
+     */
+    public Player getPlayer() {
+        return player;
+    }
+
+    /**
+     * Get a copy of the location the player was previously at.
+     *
+     * @return the old location
+     */
+    public Location getFrom() {
+        return from.clone();
+    }
+
+    /**
+     * Get a copy of the location the player is moving to.
+     * @return the new location
+     */
+    public Location getTo() {
+        return to.clone();
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    private static HandlerList handlerList;
+
+    public static HandlerList getHandlerList() {
+        return handlerList;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return getHandlerList();
+    }
+}
-- 
2.7.1

