From 8955c968817430644139c68a2a900e0b89c5fa7d Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Thu, 30 Jul 2015 18:12:29 -0700
Subject: [PATCH] Allow plugins to replace spigot anti-XRay


diff --git a/src/main/java/net/techcable/tacospigot/BlockPos.java b/src/main/java/net/techcable/tacospigot/BlockPos.java
new file mode 100644
index 0000000..5fd3381
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/BlockPos.java
@@ -0,0 +1,76 @@
+package net.techcable.tacospigot;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+
+/**
+ * An immutable block position
+ */
+public class BlockPos {
+
+    private final int x, y, z;
+
+    /**
+     * Create a new block position
+     *
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param z the z coordinate
+     */
+    public BlockPos(int x, int y, int z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    /**
+     * Return the x coordinate at this position
+     *
+     * @return the x coordinate at this position
+     */
+    public int getX() {
+        return x;
+    }
+
+    /**
+     * Return the y coordinate at this position
+     *
+     * @return the y coordinate at this position
+     */
+    public int getY() {
+        return y;
+    }
+
+    /**
+     * Return the z coordinate at this position
+     *
+     * @return the z coordinate at this position
+     */
+    public int getZ() {
+        return z;
+    }
+
+    /**
+     * Convert this block position to a bukkit location
+     *
+     * @param world the world the location is in
+     *
+     * @return a location at this position in the specified world
+     */
+    public Location asLocation(World world) {
+        return new Location(world, x, y, z); // Create a new one each time, because it is mutable
+    }
+
+    /**
+     * Convert this block position to an absolute position
+     *
+     * @param chunkX the x position of the chunk containing this block
+     * @param chunkZ the z position of the chunk containing this block
+     *
+     * @return the absolute position of this block
+     */
+    public BlockPos toAbsolute(int chunkX, int chunkZ) {
+        return new BlockPos((chunkX << 4) | (getX() & 0xF), getY(), (chunkZ << 4) | (getZ() & 0xF));
+    }
+
+}
diff --git a/src/main/java/net/techcable/tacospigot/xray/AntiXRayEngine.java b/src/main/java/net/techcable/tacospigot/xray/AntiXRayEngine.java
new file mode 100644
index 0000000..0e608a9
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/xray/AntiXRayEngine.java
@@ -0,0 +1,55 @@
+package net.techcable.tacospigot.xray;
+
+import net.techcable.tacospigot.BlockPos;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+
+/**
+ * An anti-XRay engine that hides blocks in some way
+ * <p/>
+ * Can be set with {@link org.bukkit.World#setAntiXRayEngine(AntiXRayEngine)}
+ */
+public interface AntiXRayEngine {
+
+    /**
+     * Notify the anti-XRay engine of a block change
+     * <p>
+     * Implementations should re-check any assumptions they made about nearby blocks when this is called
+     * This method will always be called on the main thread
+     * </p>
+     *
+     * @param world the world where the block was changed
+     * @param location the location where the block was changed
+     */
+    public void onBlockChange(World world, BlockPos location);
+
+    /**
+     * Hide blocks in the chunk data
+     * <p/>
+     * <p>
+     * This method will always be called from the main thread
+     * </p>
+     *
+     * @param world the world to modify the chunk data in
+     * @param chunkX the x position of the chunk
+     * @param chunkZ the z position of the chunk
+     * @param data a stream of chunk data to modify
+     */
+    public void obfuscateSync(World world, int chunkX, int chunkZ, ChunkDataIterator data);
+
+    /**
+     * Hide blocks in the chunk data
+     * <p/>
+     * <p>
+     * This method may be called from any thread except the main thread
+     * </p>
+     *
+     * @param world the world to modify the chunk data in
+     * @param chunkX the x position of the chunk
+     * @param chunkZ the z position of the chunk
+     * @param iterator a stream of chunk data to modify
+     */
+    public void obfuscate(World world, int chunkX, int chunkZ, ChunkDataIterator iterator);
+
+}
diff --git a/src/main/java/net/techcable/tacospigot/xray/ChunkDataIterator.java b/src/main/java/net/techcable/tacospigot/xray/ChunkDataIterator.java
new file mode 100644
index 0000000..1439607
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/xray/ChunkDataIterator.java
@@ -0,0 +1,128 @@
+package net.techcable.tacospigot.xray;
+
+import net.techcable.tacospigot.BlockPos;
+
+import org.bukkit.Material;
+
+/**
+ * Reads data from a chunk
+ */
+public interface ChunkDataIterator {
+
+    /**
+     * Return if there are more blocks in the chunk
+     * <p>
+     * Advance will not throw a {@link java.util.NoSuchElementException} if this returns true
+     * </p>
+     *
+     * @return if there are more blocks in the chunk
+     */
+    public boolean hasNext();
+
+    /**
+     * Advance to the next block in the data, returning the coordinate of the block
+     *
+     * @return the coordinate of the new block
+     *
+     * @throws java.util.NoSuchElementException if there are no more blocks in the chunk
+     */
+    public BlockPos advance();
+
+    /**
+     * Return the <b>relative</b> position of the current block in the iterator
+     * <p>
+     * If absolute position is desired, use {@link #getAbsolutePosition(int, int)}
+     * </p>
+     *
+     * @return the relative position of the current block in the iterator
+     */
+    public BlockPos getCurrentPosition();
+
+    /**
+     * Return the absolute position of the current block in the iterator
+     *
+     * @param chunkX the x position of the chunk containing this block
+     * @param chunkZ the z position of the chunk containing this block
+     *
+     * @return the absolute position of the current block in the iterator
+     */
+    public BlockPos getAbsolutePosition(int chunkX, int chunkZ);
+
+    /**
+     * Returns the block id at the current location
+     *
+     * @param id the new block id
+     *
+     * @deprecated magic values
+     */
+    @Deprecated
+    public void setBlockId(int id);
+
+    /**
+     * Set the block type at the current location
+     *
+     * @param type the new block type
+     */
+    public void setBlockType(Material type);
+
+    /**
+     * Returns the block type at the current block
+     *
+     * @return the block type
+     */
+    public Material getBlockType();
+
+    /**
+     * Returns the block id at the current block
+     *
+     * @return the block id
+     *
+     * @deprecated magic values
+     */
+    @Deprecated
+    public int getBlockId();
+
+    /**
+     * Return the metadata at the current block
+     *
+     * @return the block metadata
+     *
+     * @deprecated magic values
+     */
+    @Deprecated
+    public int getBlockMeta();
+
+    /**
+     * Set the metadata at the current block
+     *
+     * @param meta the new block metadata
+     *
+     * @deprecated magic values
+     */
+    @Deprecated
+    public void setBlockMeta(int meta);
+
+    /**
+     * Returns if this chunk data contains the current block
+     *
+     * @return if the block has been sent
+     */
+    public boolean isSent();
+
+    /**
+     * Returns if this chunk data contains the specified "section"
+     * <p>
+     * Chunks can have up to 16 sections, which are vertical portions of the chunk
+     * Each 16 has 16 x y and z blocks
+     * </p>
+     *
+     * @param section the section id
+     *
+     * @return if this chunk data contains the specified section
+     *
+     * @deprecated sections may not exist in the current form in future versions of minecraft
+     */
+    @Deprecated
+    public boolean isSent(int section);
+
+}
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 09d34c7..480f205 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1,5 +1,7 @@
 package org.bukkit;
 
+import net.techcable.tacospigot.xray.AntiXRayEngine; // TacoSpigot
+
 import java.io.File;
 import org.bukkit.generator.ChunkGenerator;
 import java.util.Collection;
@@ -1347,6 +1349,36 @@ public interface World extends PluginMessageRecipient, Metadatable {
     public int getLastKnownMeta(Location loc) throws ChunkNotLoadedException;
 
     // TacoSpigot end
+    // TacoSpigot start - anti-XRay engine getters and setters
+
+    /**
+     * Set the world's anti-XRay engine
+     * <p>
+     * A value of null disables anti-XRay
+     * </p>
+     *
+     * @param engine the new anti-XRay engine
+     */
+    public void setAntiXRayEngine(AntiXRayEngine engine);
+
+    /**
+     * Get the world's anti-XRay engine
+     * <p>
+     * A value of null indicates that anti-XRaying is disabled
+     * </p>
+     *
+     * @return the current anti-XRay engine
+     */
+    public AntiXRayEngine getAntiXRayEngine();
+
+    /**
+     * Return the anti-XRay engine provided by the server implementation, or null if none is provided
+     *
+     * @return the anti-XRay engine provided by the server implementation, or null
+     */
+    public AntiXRayEngine getDefaultAntiXRayEngine();
+
+    // TacoSpigot end
 
     /**
      * Represents various map environment types that a world may be
-- 
2.4.6.windows.1

