From 66afe7a33d7830fc514b797a98a2804a3fd334e1 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Mon, 5 Oct 2015 22:43:57 -0700
Subject: [PATCH] Optimize X-Ray

Spigot uses a recursive version to check for adjacent blocks that is very
slow and duplicates many checks.
This is replaced with an iterative system that never duplicates checks

diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index 5466a61..8571daa 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -5,6 +5,7 @@ import gnu.trove.set.hash.TByteHashSet;
 import net.minecraft.server.Block;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.ChunkSection;
 import net.minecraft.server.World;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
@@ -12,6 +13,10 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import java.util.HashSet;
 import java.util.Set;
 // PaperSpigot end
+// TacoSpigot start
+import net.minecraft.server.Chunk;
+import net.techcable.tacospigot.utils.BlockHelper;
+// TacoSpigot end
 
 public class AntiXray
 {
@@ -160,7 +165,7 @@ public class AntiXray
                                 }
                                 // Grab the block ID in the buffer.
                                 // TODO: extended IDs are not yet supported
-                                int blockId = (buffer[index << 1] & 0xFF) 
+                                int blockId = (buffer[index << 1] & 0xFF)
                                         | ((buffer[(index << 1) + 1] & 0xFF) << 8);
                                 blockId >>>= 4;
                                 // Check if the block should be obfuscated
@@ -206,21 +211,31 @@ public class AntiXray
         }
     }
 
-    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf)
+    // TacoSpigot start
+    private void updateNearbyBlocks(World world, BlockPosition startPos, int radius, boolean updateSelf) {
+        BlockHelper.forEachAdjacentBlock(startPos, radius, (pos) -> {
+            if (!updateSelf && pos.equals(startPos)) return;
+            updateBlock(world, pos);
+        });
+    }
+
+    private void updateBlock(World world, BlockPosition position)
     {
         // If the block in question is loaded
         if ( world.isLoaded( position ) )
         {
             // Get block id
-            Block block = world.getType(position).getBlock();
+            Block block = getType(world, position); // TacoSpigot - directly access the underlying data
 
             // See if it needs update
-            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
+            if ( obfuscateBlocks[Block.getId( block )] ) // TacoSpigot - always update
             {
                 // Send the update
                 world.notify( position );
             }
 
+            // TacoSpigot start
+            /*
             // Check other blocks for updates
             if ( radius > 0 )
             {
@@ -231,31 +246,27 @@ public class AntiXray
                 updateNearbyBlocks( world, position.south(), radius - 1, true );
                 updateNearbyBlocks( world, position.north(), radius - 1, true );
             }
+            */
+            // TacoSpigot end
         }
     }
 
     private static boolean isLoaded(World world, BlockPosition position, int radius)
     {
-        return world.isLoaded( position )
-                && ( radius == 0 ||
-                ( isLoaded( world, position.east(), radius - 1 )
-                && isLoaded( world, position.west(), radius - 1 )
-                && isLoaded( world, position.up(), radius - 1 )
-                && isLoaded( world, position.down(), radius - 1 )
-                && isLoaded( world, position.south(), radius - 1 )
-                && isLoaded( world, position.north(), radius - 1 ) ) );
+        // TacoSpigot start
+        return BlockHelper.isAllAdjacentBlocksFillPredicate(position, radius, world::isLoaded);
+        // TacoSpigot end
     }
 
-    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition position, int radius)
+    // TacoSpigot start
+    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition startPos, int radius)
     {
-        return !isSolidBlock(world.getType(position, false).getBlock()) /* isSolidBlock */
-                || ( radius > 0
-                && ( hasTransparentBlockAdjacent( world, position.east(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.west(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.up(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.down(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.south(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.north(), radius - 1 ) ) );
+        // !(solid blocks all around)
+        return !BlockHelper.isAllAdjacentBlocksFillPredicate(startPos, radius, (position) -> {
+            Block block = getType(world, position);
+            return isSolidBlock(block);
+        }); /* isSolidBlock */
+        // TacoSpigot end
     }
 
     private static boolean isSolidBlock(Block block) {
@@ -266,4 +277,24 @@ public class AntiXray
         // blocks around them.
         return block.isOccluding() && block != Blocks.MOB_SPAWNER && block != Blocks.BARRIER;
     }
+
+    // TacoSpigot start
+    public static Block getType(World world, BlockPosition pos) {
+        int x = pos.getX();
+        int y = pos.getY();
+        int z = pos.getZ();
+        Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) return Blocks.AIR;
+        int sectionId = y >> 4;
+        if (sectionId < 0 || sectionId > 15) return Blocks.AIR;
+        ChunkSection section = chunk.getSections()[sectionId];
+        if (section == null) return Blocks.AIR; // Handle empty chunks
+        x &= 0xF;
+        y &= 0xF;
+        z &= 0xF;
+        int combinedId = section.getIdArray()[(y << 8) | (z << 4) | x];
+        int blockId = combinedId >> 4;
+        return BlockHelper.getBlock(blockId);
+    }
+    // TacoSpigot end
 }
-- 
2.6.1.windows.1

