From 7a27378276c433240fe6784b11fe5225512a5b9f Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Mon, 5 Oct 2015 22:43:57 -0700
Subject: [PATCH] Optimize X-Ray

Spigot uses a recursive version to check for adjacent blocks that is very
slow and duplicates many checks.
This is replaced with an iterative system that never duplicates checks

diff --git a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
new file mode 100644
index 0000000..e51a766
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
@@ -0,0 +1,137 @@
+package net.techcable.tacospigot.utils;
+
+import java.util.AbstractSet;
+import java.util.Iterator;
+import java.util.Spliterator;
+import java.util.Spliterators;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.AbstractIterator;
+
+import net.minecraft.server.Block;
+import net.minecraft.server.BlockPosition;
+
+public class BlockHelper {
+    private BlockHelper() {
+    }
+
+    public static Stream<BlockPosition> streamAdjacentBlocks(final BlockPosition pos, int radius) {
+        Preconditions.checkArgument(radius >= 0, "Negative radius %s", radius);
+        return StreamSupport.stream(new AdjacentBlockSet(pos, radius).spliterator(), false);
+    }
+
+    public static void forEachAdjacentBlock(BlockPosition position, int radius, Consumer<BlockPosition> action) {
+        new AdjacentBlockSet(position, radius).forEach(action);
+    }
+
+    public static boolean isAllAdjacentBlocksFillPredicate(BlockPosition position, int radius, Predicate<BlockPosition> predicate) {
+        for (BlockPosition adjacent : new AdjacentBlockSet(position, radius)) {
+            if (!predicate.test(adjacent)) return false;
+        }
+        return true;
+    }
+
+    private static final Block[] blockById = new Block[256];
+
+    static {
+        for (int i = 0; i < blockById.length; i++) {
+            blockById[i] = Block.getById(i);
+        }
+    }
+
+    public static Block getBlock(int id) {
+        return id < 256 ? blockById[id] : Block.getById(id);
+    }
+
+    public static class AdjacentBlockSet extends AbstractSet<BlockPosition> {
+        private final int startX, endX;
+        private final int startY, endY;
+        private final int startZ, endZ;
+
+
+        public AdjacentBlockSet(BlockPosition pos, int radius) {
+            this(
+                    pos.getX() - radius, // startX
+                    pos.getX() + radius, // endX
+                    Math.max(0, pos.getY() - radius), // startY
+                    Math.min(255, pos.getY() + radius), // endY
+                    pos.getZ() - radius, // startZ
+                    pos.getZ() + radius // endZ
+            );
+        }
+
+        public AdjacentBlockSet(int startX, int endX, int startY, int endY, int startZ, int endZ) {
+            this.startX = startX;
+            this.endX = endX;
+            this.startY = startY;
+            this.endY = endY;
+            this.startZ = startZ;
+            this.endZ = endZ;
+        }
+
+        @Override
+        public int size() {
+            return (endX - startX) * (endY - startY) * (endZ - startZ);
+        }
+
+        @Override
+        public Spliterator<BlockPosition> spliterator() {
+            return Spliterators.spliterator(iterator(), size(), Spliterator.IMMUTABLE | Spliterator.ORDERED | Spliterator.DISTINCT | Spliterator.NONNULL);
+        }
+
+        @Override
+        public Iterator<BlockPosition> iterator() {
+            return new AdjacentBlockIterator();
+        }
+
+        @Override
+        public void forEach(Consumer<? super BlockPosition> action) {
+            iterator().forEachRemaining(action);
+        }
+
+        private class AdjacentBlockIterator extends AbstractIterator<BlockPosition> {
+            private int x = startX;
+            private int y = startY;
+            private int z = startZ;
+
+            @Override
+            protected BlockPosition computeNext() {
+                final int x = this.x;
+                final int y = this.y;
+                final int z = this.z;
+                if (z <= endZ) {
+                    ++this.z;
+                } else {
+                    if (y < endY) {
+                        ++this.y;
+                    } else {
+                        if (x < endX) {
+                            ++this.x;
+                        } else return endOfData();
+                        this.y = startY;
+                    }
+                    this.z = startZ;
+                    return computeNext();
+                }
+                return new BlockPosition(x, y, z);
+            }
+
+            @Override
+            public void forEachRemaining(Consumer<? super BlockPosition> action) {
+                for (int x = this.x; x <= endX; x++) {
+                    for (int y = this.y; y <= endY; y++) {
+                        for (int z = this.z; z <= endZ; z++) {
+                            BlockPosition adjacent = new BlockPosition(x, y, z);
+                            action.accept(adjacent);
+                        }
+                    }
+                }
+                endOfData();
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index c2ad90c..3a13d38 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -5,6 +5,7 @@ import gnu.trove.set.hash.TByteHashSet;
 import net.minecraft.server.Block;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.ChunkSection;
 import net.minecraft.server.World;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import co.aikar.timings.SpigotTimings;
@@ -13,6 +14,10 @@ import co.aikar.timings.SpigotTimings;
 import java.util.HashSet;
 import java.util.Set;
 // PaperSpigot end
+// TacoSpigot start
+import net.minecraft.server.Chunk;
+import net.techcable.tacospigot.utils.BlockHelper;
+// TacoSpigot end
 
 public class AntiXray
 {
@@ -158,7 +163,7 @@ public class AntiXray
                                 }
                                 // Grab the block ID in the buffer.
                                 // TODO: extended IDs are not yet supported
-                                int blockId = (buffer[index << 1] & 0xFF) 
+                                int blockId = (buffer[index << 1] & 0xFF)
                                         | ((buffer[(index << 1) + 1] & 0xFF) << 8);
                                 blockId >>>= 4;
                                 // Check if the block should be obfuscated
@@ -204,21 +209,31 @@ public class AntiXray
         }
     }
 
-    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf)
+    // TacoSpigot start
+    private void updateNearbyBlocks(World world, BlockPosition startPos, int radius, boolean updateSelf) {
+        BlockHelper.forEachAdjacentBlock(startPos, radius, (pos) -> {
+            if (!updateSelf && pos.equals(startPos)) return;
+            updateBlock(world, pos);
+        });
+    }
+
+    private void updateBlock(World world, BlockPosition position)
     {
         // If the block in question is loaded
         if ( world.isLoaded( position ) )
         {
             // Get block id
-            Block block = world.getType(position).getBlock();
+            Block block = getType(world, position); // TacoSpigot - directly access the underlying data
 
             // See if it needs update
-            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
+            if ( obfuscateBlocks[Block.getId( block )] ) // TacoSpigot - always update
             {
                 // Send the update
                 world.notify( position );
             }
 
+            // TacoSpigot start
+            /*
             // Check other blocks for updates
             if ( radius > 0 )
             {
@@ -229,31 +244,27 @@ public class AntiXray
                 updateNearbyBlocks( world, position.south(), radius - 1, true );
                 updateNearbyBlocks( world, position.north(), radius - 1, true );
             }
+            */
+            // TacoSpigot end
         }
     }
 
     private static boolean isLoaded(World world, BlockPosition position, int radius)
     {
-        return world.isLoaded( position )
-                && ( radius == 0 ||
-                ( isLoaded( world, position.east(), radius - 1 )
-                && isLoaded( world, position.west(), radius - 1 )
-                && isLoaded( world, position.up(), radius - 1 )
-                && isLoaded( world, position.down(), radius - 1 )
-                && isLoaded( world, position.south(), radius - 1 )
-                && isLoaded( world, position.north(), radius - 1 ) ) );
+        // TacoSpigot start
+        return BlockHelper.isAllAdjacentBlocksFillPredicate(position, radius, world::isLoaded);
+        // TacoSpigot end
     }
 
-    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition position, int radius)
+    // TacoSpigot start
+    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition startPos, int radius)
     {
-        return !isSolidBlock(world.getType(position, false).getBlock()) /* isSolidBlock */
-                || ( radius > 0
-                && ( hasTransparentBlockAdjacent( world, position.east(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.west(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.up(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.down(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.south(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.north(), radius - 1 ) ) );
+        // !(solid blocks all around)
+        return !BlockHelper.isAllAdjacentBlocksFillPredicate(startPos, radius, (position) -> {
+            Block block = getType(world, position);
+            return isSolidBlock(block);
+        }); /* isSolidBlock */
+        // TacoSpigot end
     }
 
     private static boolean isSolidBlock(Block block) {
@@ -264,4 +275,24 @@ public class AntiXray
         // blocks around them.
         return block.isOccluding() && block != Blocks.MOB_SPAWNER && block != Blocks.BARRIER;
     }
+
+    // TacoSpigot start
+    public static Block getType(World world, BlockPosition pos) {
+        int x = pos.getX();
+        int y = pos.getY();
+        int z = pos.getZ();
+        Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) return Blocks.AIR;
+        int sectionId = y >> 4;
+        if (sectionId < 0 || sectionId > 15) return Blocks.AIR;
+        ChunkSection section = chunk.getSections()[sectionId];
+        if (section == null) return Blocks.AIR; // Handle empty chunks
+        x &= 0xF;
+        y &= 0xF;
+        z &= 0xF;
+        int combinedId = section.getIdArray()[(y << 8) | (z << 4) | x];
+        int blockId = combinedId >> 4;
+        return BlockHelper.getBlock(blockId);
+    }
+    // TacoSpigot end
 }
-- 
2.7.1

