From 20d38e533f980bdbcf6ac9b20e2fe2b1a38e9bcd Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 9 Sep 2015 10:01:04 -0700
Subject: [PATCH] Make chunk saving and loading more memory efficent

FileIOThread has a queue of chunks to save. Since the FileIOThread sleaps after every write, lots of chunks can get queued for save.
This patch elimantes that sleaping, so the FileIOThread tries to empty the queue as fast as possible.
__________________________
Minecraft ineffeciently uses OutputStreams by calling .write(int) on the stream.
For Chunks, this is a DeflaterOutputStream, which allocates a single byte EVERY write.

This is causing the server to allocate tons of new byte[1] objects.
Additionally, this is very ineffecient for the Deflate process.

By Buffering Writes the same way it already is Buffering Reads, we will
write to the stream much more effeciently.
__________________________
Instead of writing a '0' one at a time to a RegionFile, we write a whole array of 0s at once.

diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index 4733f94..81802d4 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -39,19 +39,27 @@ public class FileIOThread implements Runnable {
                 ++this.d;
             }
 
+            // TacoSpigot start - never sleep
+            /*
             try {
                 Thread.sleep(this.e ? 0L : 10L);
             } catch (InterruptedException interruptedexception) {
                 interruptedexception.printStackTrace();
             }
+            */
+            // TacoSpigot end
         }
 
         if (this.b.isEmpty()) {
+            // TacoSpigot start - never sleep
+            /*
             try {
                 Thread.sleep(25L);
             } catch (InterruptedException interruptedexception1) {
                 interruptedexception1.printStackTrace();
             }
+            */
+            // TacoSpigot end
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 3e31f4b..601f204 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -1,14 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.io.BufferedInputStream;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.RandomAccessFile;
+
+import java.io.*;
 import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
@@ -38,13 +32,11 @@ public class RegionFile {
             int i;
 
             if (this.c.length() < 4096L) {
-                for (i = 0; i < 1024; ++i) {
-                    this.c.writeInt(0);
-                }
-
-                for (i = 0; i < 1024; ++i) {
-                    this.c.writeInt(0);
-                }
+                // TacoSpigot start - effcicently 0 out the array
+                if (RegionFile.a.length != 1024) throw new AssertionError("Length of RegionFile.a must be 1024 not " + a.length);
+                this.c.write(RegionFile.a);
+                this.c.write(RegionFile.a);
+                // TacoSpigot end
 
                 this.g += 8192;
             }
@@ -177,7 +169,7 @@ public class RegionFile {
     }
 
     public DataOutputStream b(int i, int j) {
-        return this.d(i, j) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)));
+        return this.d(i, j) ? null : new DataOutputStream(new BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)))); // TacoSpigot - use a BufferedOutputStream
     }
 
     protected synchronized void a(int i, int j, byte[] abyte, int k) {
-- 
2.3.2 (Apple Git-55)

