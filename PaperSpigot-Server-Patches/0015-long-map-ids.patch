From a8dbaedb3e74eaf8ddd54634d5a7e141b53c481c Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Fri, 25 Sep 2015 13:47:52 -0700
Subject: [PATCH] long map ids


diff --git a/src/main/java/net/minecraft/server/ItemMapEmpty.java b/src/main/java/net/minecraft/server/ItemMapEmpty.java
index 6bf90c4..b607af8 100644
--- a/src/main/java/net/minecraft/server/ItemMapEmpty.java
+++ b/src/main/java/net/minecraft/server/ItemMapEmpty.java
@@ -9,8 +9,17 @@ public class ItemMapEmpty extends ItemWorldMapBase {
     public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
         World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
         ItemStack itemstack1 = new ItemStack(Items.FILLED_MAP, 1, worldMain.b("map")); // CraftBukkit - use primary world for maps
-        String s = "map_" + itemstack1.getData();
-        WorldMap worldmap = new WorldMap(s);
+        // TacoSpigot start - long ids
+        String s;
+        long id;
+        if (itemstack.hasTag() && itemstack.getTag().hasKey("map_id")) {
+            id = itemstack.getTag().getLong("map_id");
+        } else {
+            id = itemstack.getData();
+        }
+        s = "map_" + id;
+        WorldMap worldmap = new WorldMap(id);
+        // TacoSpigot end
 
         worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
         worldmap.scale = 0;
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index 6473ee5..b6f8694 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -16,14 +16,25 @@ public class ItemWorldMap extends ItemWorldMapBase {
     }
 
     public WorldMap getSavedMap(ItemStack itemstack, World world) {
-        World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
-        String s = "map_" + itemstack.getData();
+        // TacoSpigot start - int map ids
+        WorldServer worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
+        String s;
+        if (itemstack.hasTag() && itemstack.getTag().hasKey("map_id")) {
+            long id = itemstack.getTag().getLong("map_id");
+            s = "map_" + id;
+        } else {
+            s = "map_" + itemstack.getData();
+        }
+        // TacoSpigot end
         WorldMap worldmap = (WorldMap) worldMain.a(WorldMap.class, s); // CraftBukkit - use primary world for maps
 
         if (worldmap == null && !world.isClientSide) {
-            itemstack.setData(worldMain.b("map")); // CraftBukkit - use primary world for maps
-            s = "map_" + itemstack.getData();
-            worldmap = new WorldMap(s);
+            // TacoSpigot start - long map ids
+            long id = worldMain.mapIdTracker.getNextId(); // CraftBukkit - use primary world for maps
+            if (itemstack.getTag() == null) itemstack.setTag(new NBTTagCompound());
+            itemstack.getTag().setLong("map_id", id);
+            worldmap = new WorldMap(id);
+            // TacoSpigot end
             worldmap.scale = 3;
             worldmap.a((double) world.getWorldData().c(), (double) world.getWorldData().e(), worldmap.scale);
             worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - fixes Bukkit multiworld maps
@@ -195,8 +206,12 @@ public class ItemWorldMap extends ItemWorldMapBase {
 
             world = world.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
 
-            itemstack.setData(world.b("map"));
-            WorldMap worldmap1 = new WorldMap("map_" + itemstack.getData());
+            // TacoSpigot start - long ids
+            long id = ((WorldServer) world).mapIdTracker.getNextId();
+            if (itemstack.getTag() == null) itemstack.setTag(new NBTTagCompound());
+            itemstack.getTag().setLong("map_id", id);
+            WorldMap worldmap1 = new WorldMap(id);
+            // TacoSpigot end
 
             worldmap1.scale = (byte) (worldmap.scale + 1);
             if (worldmap1.scale > 4) {
@@ -206,7 +221,14 @@ public class ItemWorldMap extends ItemWorldMapBase {
             worldmap1.a((double) worldmap.centerX, (double) worldmap.centerZ, worldmap1.scale);
             worldmap1.map = worldmap.map;
             worldmap1.c();
-            world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            String stackId;
+            if (itemstack.hasTag() && itemstack.getTag().hasKey("map_id")) {
+                long stackIdLong = itemstack.getTag().getLong("map_id");
+                stackId = "map_" + stackIdLong;
+            } else {
+                stackId = "map_" + itemstack.getData();
+            }
+            world.a(stackId, (PersistentBase) worldmap1);
 
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 162b3a3..29dfb45 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -32,7 +32,13 @@ public class WorldMap extends PersistentBase {
     private UUID uniqueId = null;
     // CraftBukkit end
 
-    public WorldMap(String s) {
+    // TacoSpigot start - long ids
+    public WorldMap(long l) {
+        this("map_" + l);
+    }
+
+    private WorldMap(String s) {
+        // TacoSpigot end
         super(s);
         // CraftBukkit start
         mapView = new CraftMapView(this);
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index fb16a8a..49ecda1 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,6 +13,8 @@ import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+
+import net.techcable.tacospigot.MapIdTracker;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -49,6 +51,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private int T;
     private static final List<StructurePieceTreasure> U = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.STICK, 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.PLANKS), 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG), 0, 1, 3, 10), new StructurePieceTreasure(Items.STONE_AXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_AXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.STONE_PICKAXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_PICKAXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.APPLE, 0, 2, 3, 5), new StructurePieceTreasure(Items.BREAD, 0, 2, 3, 3), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG2), 0, 1, 3, 10)});
     private List<NextTickListEntry> V = Lists.newArrayList();
+    public final net.techcable.tacospigot.MapIdTracker mapIdTracker = new MapIdTracker(this); // TacoSpigot
 
     // CraftBukkit start
     public final int dimension;
diff --git a/src/main/java/net/techcable/tacospigot/MapIdTracker.java b/src/main/java/net/techcable/tacospigot/MapIdTracker.java
new file mode 100644
index 0000000..07f2284
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/MapIdTracker.java
@@ -0,0 +1,57 @@
+package net.techcable.tacospigot;
+
+import com.google.common.base.Charsets;
+import com.google.common.io.Closeables;
+import com.google.common.io.Files;
+import net.minecraft.server.WorldServer;
+import org.apache.commons.io.IOUtils;
+import org.spigotmc.SneakyThrow;
+
+import java.io.*;
+
+public class MapIdTracker {
+    private final WorldServer worldServer;
+
+    public MapIdTracker(WorldServer worldServer) {
+        this.worldServer = worldServer;
+    }
+
+    public synchronized long getNextId() {
+        BufferedReader reader = null;
+        try {
+            long nextId;
+            if (getFile().exists()) {
+                reader = Files.newReader(getFile(), Charsets.UTF_8);
+                String line = reader.readLine();
+                nextId = Long.parseLong(line);
+            } else {
+                nextId = 100000; // Start at 100,000 to avoid conflicts with the old system
+            }
+            setNextId(nextId + 1);
+            return nextId;
+        } catch (IOException e) {
+            SneakyThrow.sneaky(e); // Minimal diff is good :D
+            throw new RuntimeException("Could not sneaky throw", e);
+        } finally {
+            Closeables.closeQuietly(reader);
+        }
+    }
+
+    private synchronized void setNextId(long nextId) {
+        BufferedWriter writer = null;
+        try {
+            if (!getFile().exists()) getFile().createNewFile();
+            writer = Files.newWriter(getFile(), Charsets.UTF_8);
+            writer.write(Long.toString(nextId));
+        } catch (IOException e) {
+            SneakyThrow.sneaky(e);
+            throw new RuntimeException("Could not sneaky throw", e);
+        } finally {
+            IOUtils.closeQuietly(writer);
+        }
+    }
+
+    public File getFile() {
+        return worldServer.getDataManager().getDataFile("map-ids.txt");
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dad0e33..1688ca5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -85,6 +85,7 @@ import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.ShapedRecipe;
 import org.bukkit.inventory.ShapelessRecipe;
+import org.bukkit.map.MapView;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 import org.bukkit.plugin.Plugin;
@@ -1258,6 +1259,18 @@ public final class CraftServer implements Server {
         return worldmap.mapView;
     }
 
+    // TacoSpigot start - api for long map ids
+    @Override
+    public MapView getMap(long highId) {
+        PersistentCollection collection = console.worlds.get(0).worldMaps;
+        WorldMap worldmap = (WorldMap) collection.get(WorldMap.class, "map_" + highId);
+        if (worldmap == null) {
+            return null;
+        }
+        return worldmap.mapView;
+    }
+    // TacoSpigot end
+
     @Override
     public CraftMapView createMap(World world) {
         Validate.notNull(world, "World cannot be null");
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index d8af390..724b955 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -29,6 +29,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
         CraftMetaMap map = (CraftMetaMap) meta;
         this.scaling = map.scaling;
+        this.id = map.id; // TacoSpigot
     }
 
     CraftMetaMap(NBTTagCompound tag) {
@@ -37,6 +38,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (tag.hasKey(MAP_SCALING.NBT)) {
             this.scaling = tag.getBoolean(MAP_SCALING.NBT) ? SCALING_TRUE : SCALING_FALSE;
         }
+        if (tag.hasKey("map_id")) this.id = tag.getLong("map_id"); // TacoSpigot
     }
 
     CraftMetaMap(Map<String, Object> map) {
@@ -46,6 +48,10 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (scaling != null) {
             setScaling(scaling);
         }
+        // TacoSpigot start
+        Long id = SerializableMeta.getObject(Long.class, map, "map-id", true);
+        if (id != null) setId(id);
+        // TacoSpigot end
     }
 
     @Override
@@ -55,6 +61,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             tag.setBoolean(MAP_SCALING.NBT, isScaling());
         }
+        if (id > 0) tag.setLong("map_id", id); // TacoSpigot
     }
 
     @Override
@@ -114,6 +121,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             hash ^= 0x22222222 << (isScaling() ? 1 : -1);
         }
+        if (id > 0) hash *= (id + 3); // TacoSpigot
 
         return original != hash ? CraftMetaMap.class.hashCode() ^ hash : hash;
     }
@@ -129,7 +137,17 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             builder.put(MAP_SCALING.BUKKIT, isScaling());
         }
+        if (id > 0) builder.put("map-id", id);// TacoSpigot
 
         return builder;
     }
+
+    // TacoSpigot start - allow plugins to set the id of the mapview to use
+    private long id = -1;
+    @Override
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    // TacoSpigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index 1a150d9..55c3b6b 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -27,11 +27,19 @@ public final class CraftMapView implements MapView {
         addRenderer(new CraftMapRenderer(this, worldMap));
     }
 
+    // TacoSpigot start - long map ids
     public short getId() {
+        long longId = getLongId();
+        if (longId > Short.MAX_VALUE) throw new IllegalStateException(longId + " can't be represented as a short, please update plugin");
+        return (short) longId;
+    }
+
+    public long getLongId() {
+        // TacoSpigot end
         String text = worldMap.id;
         if (text.startsWith("map_")) {
             try {
-                return Short.parseShort(text.substring("map_".length()));
+                return Long.parseLong(text.substring("map_".length())); // TacoSpigot
             }
             catch (NumberFormatException ex) {
                 throw new IllegalStateException("Map has non-numeric ID");
-- 
2.5.2.windows.2

