From 4ac45e94a58a2ad8812991557f8d9d5fd4338b1c Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Fri, 24 Jul 2015 16:20:18 -0700
Subject: [PATCH] Fix hopper lag by making entities look for hoppers.

Every tick hoppers try and find an inventory to extract from, if no tile
entity is above the hopper (which there often isn't) it will do a bounding
box search for minecart chests and minecart hoppers.
If it can't find an inventory, it will then look for a dropped item, which is another bounding box search.
This patch eliminates that expensive check by having dropped items and minecart hoppers/chests look for hoppers instead.
Hoppers are tile entities meaning you can do a simple tile entity lookup to find the nearest hopper in range.
Pushing out of hoppers causes a bouding box lookup, which this patch replaces with a map lookup.
This patch may cause problems if you have an insane amout of dropped items, which is why it can be disabled in the configuration.

diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 907c57b..558282c 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -9,6 +9,7 @@ public class ChunkSection {
     private NibbleArray emittedLight;
     private NibbleArray skyLight;
     boolean isDirty; // PaperSpigot
+    public int hopperCount; // TacoSpigot
 
     public ChunkSection(int i, boolean flag) {
         this.yPos = i;
@@ -49,6 +50,13 @@ public class ChunkSection {
                 --this.tickingBlockCount;
             }
         }
+        // TacoSpigot start - count hoppers
+        if (block == Blocks.HOPPER) { // If the old block is a hopper
+            if (block1 != Blocks.HOPPER) hopperCount--; // If the new one isn't a hopper, we lost a hopper
+        } else if (block1 == Blocks.HOPPER) { // If the new block is a hopper (and the old one isnt)
+            hopperCount++; // We got a hopper
+        }
+        // TacoSpigot end
 
         if (block1 != Blocks.AIR) {
             ++this.nonEmptyBlockCount;
@@ -116,6 +124,7 @@ public class ChunkSection {
                             ++this.tickingBlockCount;
                         }
                     }
+                    if (block == Blocks.HOPPER) this.hopperCount++; // TacoSpigot - count hoppers
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 1f8b1c7..63cd4bd 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -4,6 +4,7 @@ import java.util.Iterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.event.player.PlayerPickupItemEvent; // CraftBukkit
+import net.techcable.tacospigot.HopperHelper; // TacoSpigot
 
 public class EntityItem extends Entity {
 
@@ -59,6 +60,7 @@ public class EntityItem extends Entity {
             this.die();
         } else {
             super.t_();
+            if (HopperHelper.acceptItemEntity(this)) return; // TacoSpigot
             // CraftBukkit start - Use wall time for pickup and despawn timers
             int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
             if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
@@ -124,6 +126,7 @@ public class EntityItem extends Entity {
     // Spigot start - copied from above
     @Override
     public void inactiveTick() {
+        if (HopperHelper.acceptItemEntity(this)) return; // TacoSpigot
         // CraftBukkit start - Use wall time for pickup and despawn timers
         int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
         if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index c6487f2..8ca2d29 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -7,6 +7,7 @@ import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
+import net.techcable.tacospigot.HopperHelper; // TacoSpigot
 
 public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements ITileInventory {
 
@@ -60,6 +61,20 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
 
     }
 
+    // TacoSpigot start
+    @Override
+    public void t_() {
+        super.t_();
+        HopperHelper.acceptItem(this, this);
+    }
+
+    @Override
+    public void inactiveTick() {
+        super.inactiveTick();
+        HopperHelper.acceptItem(this, this);
+    }
+    // TacoSpigot end
+
     public ItemStack getItem(int i) {
         return this.items[i];
     }
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index cab636a..cd4bdc1 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -18,6 +18,25 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     private String f;
     private int g = -1;
 
+    // TacoSpigot start - Have items push themselves into the hopper instead of the hopper pulling them in
+    public boolean acceptItem(EntityItem entityItem) {
+        if (!isWantItem()) return false;
+        boolean didAccept = a(this, entityItem);
+        if (didAccept) onAccept();
+        return didAccept;
+    }
+
+    public boolean isWantItem() {
+        return !n() && !this.q() && BlockHopper.f(this.u());
+    }
+
+    private void onAccept() {
+        this.d(world.spigotConfig.hopperTransfer);
+        this.update();
+    }
+
+    // TacoSpigot end
+
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
     private int maxStack = MAX_STACK;
@@ -174,9 +193,8 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             --this.g;
             if (!this.n()) {
                 this.d(0);
-                this.m();
+                this.m(); // m() handles everything
             }
-
         }
     }
 
@@ -236,7 +254,10 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     }
 
     private boolean r() {
-        IInventory iinventory = this.H();
+        // TacoSpigot start - Don't use inefficient H() which does another bounding box search
+        TileEntity tile = getWorld().getTileEntity(getPosition().shift(BlockHopper.b(this.u())));
+        IInventory iinventory = tile instanceof IInventory ? (IInventory) tile : null;
+        // TacoSpigot end
 
         if (iinventory == null) {
             return false;
@@ -341,9 +362,23 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         return true;
     }
 
+    // TacoSpigot start - Split methods, one that pushes and one that pulls
+    @Deprecated
     public static boolean a(IHopper ihopper) {
-        IInventory iinventory = b(ihopper);
+        IInventory iinventory;
+        if (ihopper.getWorld().tacoSpigotConfig.isHopperPushBased && ihopper instanceof TileEntityHopper) {
+            TileEntityHopper tileHopper = (TileEntityHopper) ihopper;
+            TileEntity above = ihopper.getWorld().getTileEntity(tileHopper.getPosition().up()); // Only pull from a above, because everything else comes to us
+            if (above instanceof IInventory) iinventory = (IInventory) above;
+            else iinventory = null;
+        } else {
+            iinventory = b(ihopper); // Use old behavior for BB entity searching
+        }
+        return acceptItem(ihopper, iinventory);
+    }
 
+    public static boolean acceptItem(IHopper ihopper, IInventory iinventory) {
+        // TacoSpigot end
         if (iinventory != null) {
             EnumDirection enumdirection = EnumDirection.DOWN;
 
@@ -357,6 +392,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
 
                 for (int i = 0; i < aint.length; ++i) {
                     if (a(ihopper, iinventory, aint[i], enumdirection)) {
+                        if (ihopper instanceof TileEntityHopper) ((TileEntityHopper) ihopper).onAccept(); // TacoSpigot - notify of accept
                         return true;
                     }
                 }
@@ -365,11 +401,12 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
 
                 for (int k = 0; k < j; ++k) {
                     if (a(ihopper, iinventory, k, enumdirection)) {
+                        if (ihopper instanceof TileEntityHopper) ((TileEntityHopper) ihopper).onAccept(); // TacoSpigot - notify of accept
                         return true;
                     }
                 }
             }
-        } else {
+        } else if (!ihopper.getWorld().tacoSpigotConfig.isHopperPushBased && ihopper instanceof TileEntityHopper) { // TacoSpigot - only search for entities in 'pull mode'
             Iterator iterator = a(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C()).iterator();
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/techcable/tacospigot/HopperHelper.java b/src/main/java/net/techcable/tacospigot/HopperHelper.java
new file mode 100644
index 0000000..1a4e771
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/HopperHelper.java
@@ -0,0 +1,58 @@
+package net.techcable.tacospigot;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.Chunk;
+import net.minecraft.server.ChunkSection;
+import net.minecraft.server.Entity;
+import net.minecraft.server.EntityItem;
+import net.minecraft.server.IInventory;
+import net.minecraft.server.MathHelper;
+import net.minecraft.server.TileEntity;
+import net.minecraft.server.TileEntityHopper;
+import net.minecraft.server.World;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+
+public class HopperHelper {
+    public static boolean acceptItem(Entity entity, IInventory inventory) {
+        if (!entity.getWorld().tacoSpigotConfig.isHopperPushBased) return false;
+        TileEntityHopper hopper = getHopper(entity.getWorld(), entity.locX, entity.locY, entity.locZ);
+        if (hopper == null) return false;
+        if (!hopper.isWantItem()) return false;
+        return TileEntityHopper.acceptItem(hopper, inventory);
+    }
+
+    public static boolean acceptItemEntity(EntityItem entity) {
+        if (!entity.getWorld().tacoSpigotConfig.isHopperPushBased) return false;
+        if (!entity.isAlive()) return false;
+        TileEntityHopper hopper = getHopper(entity.getWorld(), entity.locX, entity.locY, entity.locZ);
+        if (hopper == null) return false;
+        return hopper.acceptItem(entity);
+    }
+
+    // Finding the acceptors
+
+    private static TileEntityHopper getHopper(World world, double rawX, double rawY, double rawZ) {
+        int x = MathHelper.floor(rawX);
+        int y = MathHelper.floor(rawY) - 1; // Check below
+        int z = MathHelper.floor(rawZ);
+        if (!hasHopper(world, x, y, z)) return null;
+        BlockPosition position = new BlockPosition(x, y, z);
+        TileEntity tile = world.getTileEntity(position);
+        if (tile == null || !(tile instanceof TileEntityHopper)) return null;
+        return (TileEntityHopper) tile;
+    }
+
+    private static boolean hasHopper(World world, int x, int y, int z) {
+        Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) return false; // Not loaded
+        int sectionId = y >> 4;
+        ChunkSection section1 = chunk.getSections()[sectionId];
+        return section1 != null && section1.hopperCount > 0;
+    }
+
+}
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
index 456aee9..871535f 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
@@ -63,4 +63,9 @@ public class TacoSpigotWorldConfig {
         config.addDefault("world-settings.default." + path, def);
         return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
     }
+
+    public boolean isHopperPushBased;
+    private void isHopperPushBased() {
+        isHopperPushBased = getBoolean("hopper.push-based", true);
+    }
 }
-- 
2.4.6.windows.1

