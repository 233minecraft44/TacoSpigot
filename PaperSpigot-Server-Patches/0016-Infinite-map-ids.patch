From 8b8bc5f8b4ea438995362895f9156ce1662eb05b Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Tue, 6 Oct 2015 16:42:02 -0700
Subject: [PATCH] Infinite map ids


diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0c49a25..be68b07 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -23,6 +23,9 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 // CraftBukkit end
+// TacoSpigot start
+import net.techcable.tacospigot.MapIdManager;
+// TacoSpigot end
 
 public class EntityPlayer extends EntityHuman implements ICrafting {
 
@@ -50,7 +53,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public boolean g;
     public int ping;
     public boolean viewingCredits;
-
+    public final MapIdManager mapIdManager = new MapIdManager(this); // TacoSpigot
     // CraftBukkit start
     public String displayName;
     public IChatBaseComponent listName;
diff --git a/src/main/java/net/minecraft/server/ItemMapEmpty.java b/src/main/java/net/minecraft/server/ItemMapEmpty.java
index 6bf90c4..c4b18c6 100644
--- a/src/main/java/net/minecraft/server/ItemMapEmpty.java
+++ b/src/main/java/net/minecraft/server/ItemMapEmpty.java
@@ -8,8 +8,10 @@ public class ItemMapEmpty extends ItemWorldMapBase {
 
     public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
         World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
-        ItemStack itemstack1 = new ItemStack(Items.FILLED_MAP, 1, worldMain.b("map")); // CraftBukkit - use primary world for maps
-        String s = "map_" + itemstack1.getData();
+        // TacoSpigot start
+        ItemStack itemstack1 = new ItemStack(Items.FILLED_MAP, 1, -1); // CraftBukkit - use primary world for maps
+        String s = ItemWorldMap.setNextMapId(itemstack1, worldMain);
+        // TacoSpigot end
         WorldMap worldmap = new WorldMap(s);
 
         worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index 6473ee5..0ede6e0 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import java.util.UUID;
+
 import com.google.common.collect.HashMultiset;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multisets;
@@ -8,6 +10,10 @@ import com.google.common.collect.Multisets;
 import org.bukkit.Bukkit;
 import org.bukkit.event.server.MapInitializeEvent;
 // CraftBukkit end
+// TacoSpigot start
+import net.techcable.tacospigot.TacoSpigotConfig;
+import org.bukkit.craftbukkit.map.CraftMapView;
+// TacoSpigot end
 
 public class ItemWorldMap extends ItemWorldMapBase {
 
@@ -15,14 +21,28 @@ public class ItemWorldMap extends ItemWorldMapBase {
         this.a(true);
     }
 
+    // TacoSpigot start
+    public static String setNextMapId(ItemStack stack, World world) {
+        if (TacoSpigotConfig.infiniteMapIds) {
+            UUID id = UUID.randomUUID();
+            CraftMapView.setId(stack, id);
+            return CraftMapView.toNMSId(id);
+        } else {
+            short legacyId = (short) world.b("map");
+            if (legacyId == Short.MAX_VALUE) throw new IllegalStateException("Ran out of map ids"); // check for map id overflow
+            stack.setData(legacyId); // CraftBukkit - use primary world for maps
+            return "map_" + legacyId;
+        }
+    }
+    // TacoSpigot end
+
     public WorldMap getSavedMap(ItemStack itemstack, World world) {
         World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
-        String s = "map_" + itemstack.getData();
+        String s = CraftMapView.toNMSId(CraftMapView.getId(itemstack)); // TacoSpigot
         WorldMap worldmap = (WorldMap) worldMain.a(WorldMap.class, s); // CraftBukkit - use primary world for maps
 
         if (worldmap == null && !world.isClientSide) {
-            itemstack.setData(worldMain.b("map")); // CraftBukkit - use primary world for maps
-            s = "map_" + itemstack.getData();
+            s = setNextMapId(itemstack, world);
             worldmap = new WorldMap(s);
             worldmap.scale = 3;
             worldmap.a((double) world.getWorldData().c(), (double) world.getWorldData().e(), worldmap.scale);
@@ -194,9 +214,10 @@ public class ItemWorldMap extends ItemWorldMapBase {
             WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, world);
 
             world = world.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
-
-            itemstack.setData(world.b("map"));
-            WorldMap worldmap1 = new WorldMap("map_" + itemstack.getData());
+            // TacoSpigot start
+            String nmsId = setNextMapId(itemstack, world);
+            // TacoSpigot end
+            WorldMap worldmap1 = new WorldMap(nmsId);
 
             worldmap1.scale = (byte) (worldmap.scale + 1);
             if (worldmap1.scale > 4) {
@@ -206,7 +227,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
             worldmap1.a((double) worldmap.centerX, (double) worldmap.centerZ, worldmap1.scale);
             worldmap1.map = worldmap.map;
             worldmap1.c();
-            world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            world.a(nmsId, (PersistentBase) worldmap1); // TacoSpigot - use 'nmsId'
 
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
diff --git a/src/main/java/net/minecraft/server/RecipeMapClone.java b/src/main/java/net/minecraft/server/RecipeMapClone.java
index 579f6d1..fe3c4aa 100644
--- a/src/main/java/net/minecraft/server/RecipeMapClone.java
+++ b/src/main/java/net/minecraft/server/RecipeMapClone.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import org.bukkit.craftbukkit.map.CraftMapView; // TacoSpigot
+
 public class RecipeMapClone extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
     // CraftBukkit start - Delegate to new parent class
@@ -61,6 +63,7 @@ public class RecipeMapClone extends ShapelessRecipes implements IRecipe { // Cra
 
         if (itemstack != null && i >= 1) {
             ItemStack itemstack2 = new ItemStack(Items.FILLED_MAP, i + 1, itemstack.getData());
+            CraftMapView.setId(itemstack2, CraftMapView.getId(itemstack)); // TacoSpigot
 
             if (itemstack.hasName()) {
                 itemstack2.c(itemstack.getName());
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 162b3a3..86302ea 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -14,6 +14,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.map.CraftMapView;
 // CraftBukkit end
+import net.minecraft.server.EntityPlayer; // TacoSpigot
 
 public class WorldMap extends PersistentBase {
 
@@ -288,12 +289,15 @@ public class WorldMap extends PersistentBase {
                 }
             }
 
+            // TacoSpigot start - remap client side ids
+            int clientSideId = ((EntityPlayer) trackee).mapIdManager.getClientSideId(itemstack);
             if (this.d) {
                 this.d = false;
-                return new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, icons, render.buffer, this.e, this.f, this.g + 1 - this.e, this.h + 1 - this.f);
+                return new PacketPlayOutMap(clientSideId, WorldMap.this.scale, icons, render.buffer, this.e, this.f, this.g + 1 - this.e, this.h + 1 - this.f);
             } else {
-                return this.i++ % 5 == 0 ? new PacketPlayOutMap(itemstack.getData(), WorldMap.this.scale, icons, render.buffer, 0, 0, 0, 0) : null;
+                return this.i++ % 5 == 0 ? new PacketPlayOutMap(clientSideId, WorldMap.this.scale, icons, render.buffer, 0, 0, 0, 0) : null;
             }
+            // TacoSpigot end
             // CraftBukkit end
         }
 
diff --git a/src/main/java/net/techcable/tacospigot/MapIdManager.java b/src/main/java/net/techcable/tacospigot/MapIdManager.java
new file mode 100644
index 0000000..ee80972
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/MapIdManager.java
@@ -0,0 +1,41 @@
+package net.techcable.tacospigot;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.ItemStack;
+
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.map.MapView;
+
+/**
+ * Remaps maps to their client side ids
+ */
+public class MapIdManager {
+    private final EntityPlayer player;
+    private final Map<UUID, Short> idMap = new HashMap<>();
+    private short nextId = 1; // We start at one (for some reason)
+
+    public MapIdManager(EntityPlayer player) {
+        this.player = player;
+    }
+
+    public short getClientSideId(ItemStack stack) {
+        UUID mapId = CraftMapView.getId(stack);
+        if (!TacoSpigotConfig.infiniteMapIds) return MapView.toLegacyId(mapId);
+        return getClientSideId(mapId);
+    }
+
+    public short getClientSideId(UUID mapId) {
+        if (!idMap.containsKey(mapId)) {
+            if (nextId == Short.MAX_VALUE) {
+                player.playerConnection.disconnect("Ran out of idMap Ids. Please Reconnect");
+                return 0;
+            }
+            idMap.put(mapId, nextId++);
+        }
+        return idMap.get(mapId);
+    }
+}
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index 31cdb10..19b10f4 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -112,4 +112,9 @@ public class TacoSpigotConfig {
             thread.start();
         }
     }
+
+    public static boolean infiniteMapIds;
+    private static void infiniteMapIds() {
+        infiniteMapIds = getBoolean("maps.infinite-ids", false);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dad0e33..def0273 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -123,6 +123,9 @@ import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
 import jline.console.ConsoleReader;
 import net.md_5.bungee.api.chat.BaseComponent;
+// TacoSpigot start
+import org.bukkit.map.MapView;
+// TacoSpigot end
 
 public final class CraftServer implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
@@ -1247,15 +1250,27 @@ public final class CraftServer implements Server {
         return result;
     }
 
+    // TacoSpigot start - new map ids
+    @Override
+    public CraftMapView getMap(UUID id) {
+        if (MapView.isLegacyId(id)) return getMap(MapView.toLegacyId(id));
+        PersistentCollection collection = console.worlds.get(0).worldMaps;
+        WorldMap worldMap = (WorldMap) collection.get(WorldMap.class, "map_U" + id.toString());
+        return worldMap == null ? null : worldMap.mapView;
+    }
+
     @Override
     @Deprecated
-    public CraftMapView getMap(short id) {
+    public CraftMapView getMap(short legacyId) {
         PersistentCollection collection = console.worlds.get(0).worldMaps;
-        WorldMap worldmap = (WorldMap) collection.get(WorldMap.class, "map_" + id);
+
+        WorldMap worldmap = (WorldMap) collection.get(WorldMap.class, "map_" + legacyId);
         if (worldmap == null) {
-            return null;
+            UUID newId = MapView.fromLegacyId(legacyId);
+            worldmap = (WorldMap) collection.get(WorldMap.class, "map_U" + newId.toString());
         }
-        return worldmap.mapView;
+        return worldmap == null ? null : worldmap.mapView;
+        // TacoSpigot end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 23f05f4..7a119b9 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -24,6 +24,7 @@ import net.minecraft.server.IChatBaseComponent.ChatSerializer;
 import net.minecraft.server.Items;
 import net.minecraft.server.NBTTagString;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.map.CraftMapView; // TacoSpigot
 
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
@@ -339,7 +340,11 @@ public final class CraftItemStack extends ItemStack {
             case POTION:
                 return new CraftMetaPotion(item.getTag());
             case MAP:
-                return new CraftMetaMap(item.getTag());
+                // TacoSpigot start
+                CraftMetaMap mapMeta = new CraftMetaMap(item.getTag());
+                mapMeta.setMapId(CraftMapView.getId(item));
+                return mapMeta;
+                // TacoSpigot end
             case FIREWORK:
                 return new CraftMetaFirework(item.getTag());
             case FIREWORK_CHARGE:
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index d8af390..223b010 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -10,6 +10,11 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.MapMeta;
 
 import com.google.common.collect.ImmutableMap;
+// TacoSpigot start
+import java.util.UUID;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.map.MapView;
+// TacoSpigot end
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaMap extends CraftMetaItem implements MapMeta {
@@ -28,6 +33,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         }
 
         CraftMetaMap map = (CraftMetaMap) meta;
+        this.mapId = map.getMapId(); // TacoSpigot
         this.scaling = map.scaling;
     }
 
@@ -37,6 +43,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (tag.hasKey(MAP_SCALING.NBT)) {
             this.scaling = tag.getBoolean(MAP_SCALING.NBT) ? SCALING_TRUE : SCALING_FALSE;
         }
+        this.mapId = CraftMapView.getId(tag); // TacoSpigot
     }
 
     CraftMetaMap(Map<String, Object> map) {
@@ -55,6 +62,11 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             tag.setBoolean(MAP_SCALING.NBT, isScaling());
         }
+        // TacoSpigot start
+        if (!MapView.isLegacyId(getMapId())) {
+            CraftMapView.setId(tag, getMapId());
+        }
+        // TacoSpigot end
     }
 
     @Override
@@ -95,6 +107,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         }
         if (meta instanceof CraftMetaMap) {
             CraftMetaMap that = (CraftMetaMap) meta;
+            if (!this.getMapId().equals(that.getMapId())) return false; // TacoSpigot
 
             return (this.scaling == that.scaling);
         }
@@ -114,6 +127,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             hash ^= 0x22222222 << (isScaling() ? 1 : -1);
         }
+        hash ^= (getMapId().hashCode() & 0xFF0f0f); // TacoSpigot - random hash modifications :D
 
         return original != hash ? CraftMetaMap.class.hashCode() ^ hash : hash;
     }
@@ -129,7 +143,23 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (hasScaling()) {
             builder.put(MAP_SCALING.BUKKIT, isScaling());
         }
+        builder.put("id", getMapId().toString()); // TacoSpigot
 
         return builder;
     }
+
+    // TacoSpigot start
+    private UUID mapId;
+
+    @Override
+    public void setMapId(UUID mapId) {
+        this.mapId = mapId;
+    }
+
+    @Override
+    public UUID getMapId() {
+        if (mapId == null) throw new IllegalStateException("No map id for meta map");
+        return this.mapId;
+    }
+    // TacoSpigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index 1a150d9..f021e4f 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -12,8 +12,15 @@ import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+
 import org.bukkit.map.MapRenderer;
 import org.bukkit.map.MapView;
+// TacoSpigot start
+import java.util.UUID;
+import net.minecraft.server.ItemStack;
+import net.minecraft.server.NBTTagCompound;
+import org.bukkit.inventory.meta.MapMeta;
+// TacoSpigot end
 
 public final class CraftMapView implements MapView {
 
@@ -28,18 +35,32 @@ public final class CraftMapView implements MapView {
     }
 
     public short getId() {
-        String text = worldMap.id;
-        if (text.startsWith("map_")) {
+        // TacoSpigot start
+        return MapView.toLegacyId(getUniqueId());
+    }
+
+    @Override
+    public UUID getUniqueId() {
+        String raw = worldMap.id;
+        if (raw.startsWith("map_U")) {
+            return UUID.fromString(raw.replace("map_U", ""));
+        } else if (raw.startsWith("map_")) {
             try {
-                return Short.parseShort(text.substring("map_".length()));
+                short legacyId = Short.valueOf(raw.replace("map_", ""));
+                return MapView.fromLegacyId(legacyId);
+            } catch (NumberFormatException e) {
+                throw new IllegalArgumentException("Could not parse legacy ID", e);
             }
-            catch (NumberFormatException ex) {
-                throw new IllegalStateException("Map has non-numeric ID");
-            }
-        } else {
-            throw new IllegalStateException("Map has invalid ID");
-        }
+        } else throw new IllegalArgumentException("Could not parse map id " + raw);
+    }
+
+    public static String toNMSId(UUID id) {
+        if (MapView.isLegacyId(id)) {
+            int legacyId = MapView.toLegacyId(id);
+            return "map_" + legacyId;
+        } else return "map_U" + id.toString();
     }
+    // TacoSpigot end
 
     public boolean isVirtual() {
         return renderers.size() > 0 && !(renderers.get(0) instanceof CraftMapRenderer);
@@ -159,5 +180,41 @@ public final class CraftMapView implements MapView {
 
         return render;
     }
+    // TacoSpigot start
+    public static UUID getId(org.bukkit.inventory.ItemStack bukkitStack) {
+        return ((MapMeta)bukkitStack.getItemMeta()).getMapId();
+    }
 
+    public static UUID getId(ItemStack stack) {
+        UUID id = getId(stack.getTag());
+        if (id == null) {
+            short legacyId = (short) stack.getData();
+            id = MapView.fromLegacyId(legacyId);
+        }
+        return id;
+    }
+
+    public static void setId(ItemStack stack, UUID id) {
+        if (MapView.isLegacyId(id)) {
+            int legacyId = MapView.toLegacyId(id);
+            stack.setData(legacyId);
+        } else {
+            if (stack.getTag() == null) stack.setTag(new NBTTagCompound());
+            setId(stack.getTag(), id);
+        }
+    }
+
+    public static UUID getId(NBTTagCompound tag) {
+        if (tag == null) return null;
+        if (!tag.hasKey("MapUUID-MostSignificantBits") || !tag.hasKey("MapUUID-MostSignificantBits")) return null;
+        long msb = tag.getLong("MapUUID-MostSignificantBits");
+        long lsb = tag.getLong("MapUUID-LeastSignificantBits");
+        return new UUID(msb, lsb);
+    }
+
+    public static void setId(NBTTagCompound tag, UUID mapId) {
+        tag.setLong("MapUUID-MostSignificantBits", mapId.getMostSignificantBits());
+        tag.setLong("MapUUID-LeastSignificantBits", mapId.getLeastSignificantBits());
+    }
+    // TacoSpigot end
 }
-- 
2.6.1.windows.1

