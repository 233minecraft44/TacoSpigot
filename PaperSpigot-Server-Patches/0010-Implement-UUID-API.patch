From 175745fb2ac1f8e193b2e3e9d240b5f07d223e54 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 12 Aug 2015 08:42:41 -0700
Subject: [PATCH] Implement UUID API


diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index 44ea98d..3e49c7e 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -8,10 +8,14 @@ import java.lang.reflect.Modifier;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 
 import net.minecraft.server.MinecraftServer;
+import net.techcable.tacospigot.uuid.CachingLookup;
+import net.techcable.tacospigot.uuid.CachingLookup.CacheSettings;
 
+import org.apache.commons.lang3.text.WordUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
@@ -107,4 +111,37 @@ public class TacoSpigotConfig {
     private static void dataWatcherWeaklyConsistent() {
         dataWatcherWeaklyConsistent = getBoolean("data-watcher.weakly-consistent", true);
     }
+
+    public static boolean uuidCacheEnabled = true;
+    private static void uuidCacheEnabled() {
+        uuidCacheEnabled = getBoolean("uuid.cache.enable", true);
+    }
+
+    private static void cacheSettings() {
+        TimeUnit defaultTimeUnit = CachingLookup.getDefaultSettings().calculateAppropriateTimeUnit();
+        int defaultTime = (int) defaultTimeUnit.convert(CachingLookup.getDefaultSettings().getTime(), TimeUnit.MILLISECONDS);  // should always fit in an int, unless you need more than Integer.MAX_VALUE days of caching or an insane amount of percesion :p
+        int defaultMaxAmount = CachingLookup.getDefaultSettings().getMaxAmount();
+        String timeUnitName = getString("uuid.cache.unit", WordUtils.capitalizeFully(defaultTimeUnit.name())).toUpperCase();
+        TimeUnit unit;
+        try {
+            unit = TimeUnit.valueOf(timeUnitName);
+        } catch (IllegalArgumentException e) {
+            Bukkit.getLogger().warning(timeUnitName + " is not a valid unit name, using " + defaultTimeUnit);
+            unit = defaultTimeUnit;
+        }
+        int time = getInt("uuid.cache.time", defaultTime);
+        int maxAmount = getInt("uuid.cache.maxAmount", defaultMaxAmount);
+        CacheSettings settings = new CacheSettings(unit, time, maxAmount);
+        try {
+            Method method = CachingLookup.class.getDeclaredMethod("setDefaultSettings", CacheSettings.class);
+            method.setAccessible(true);
+            method.invoke(null, settings);
+        } catch (NoSuchMethodException e) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not set cache settings", e);
+        } catch (IllegalAccessException e) {
+            Bukkit.getLogger().log(Level.SEVERE, "Unable to invoke method even after call to setAccessible", e);
+        } catch (InvocationTargetException e) {
+            Bukkit.getLogger().log(Level.SEVERE, "CachingLookup.setDefaultSettings threw an exception", e.getCause());
+        }
+    }
 }
diff --git a/src/main/java/net/techcable/tacospigot/uuid/MojangProfileLookup.java b/src/main/java/net/techcable/tacospigot/uuid/MojangProfileLookup.java
new file mode 100644
index 0000000..a0fbd78
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/uuid/MojangProfileLookup.java
@@ -0,0 +1,193 @@
+package net.techcable.tacospigot.uuid;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.text.MessageFormat;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.logging.Level;
+
+import net.minecraft.server.MinecraftServer;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.util.MojangNameLookup;
+import org.bukkit.craftbukkit.util.MojangNameLookup.Response;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.Agent;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.ProfileLookupCallback;
+import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
+
+public class MojangProfileLookup implements ProfileLookup {
+
+    @Override
+    public PlayerProfile lookup(String name) {
+        Preconditions.checkNotNull(name, "Name can't be null");
+        GameProfile nms = MinecraftServer.getServer().getUserCache().getProfile(name);
+        if (nms == null) {
+            Class<?> calling = getCallerClass();
+            return Iterables.getFirst(lookup(Lists.newArrayList(name)), null);
+        }
+        return ProfileHelper.toBukkit(nms);
+    }
+
+    @Override
+    public Collection<PlayerProfile> lookup(Collection<String> names) {
+        Preconditions.checkNotNull(names, "The name list can't be null");
+        Class<?> calling = getCallerClass();
+        return lookup(names, calling);
+    }
+
+    public Collection<PlayerProfile> lookup(Collection<String> names, final Class<?> calling) {
+        final Set<PlayerProfile> properties = new HashSet<PlayerProfile>();
+        // Note that the null check is performed by onProfileLookupFailed for efficiency, as mojang calls that for null names
+        MinecraftServer.getServer().getGameProfileRepository().findProfilesByNames(names.toArray(new String[names.size()]), Agent.MINECRAFT, new ProfileLookupCallback() {
+
+            @Override
+            public void onProfileLookupSucceeded(GameProfile gameProfile) {
+                PlayerProfile bukkit = ProfileHelper.toBukkit(gameProfile);
+                properties.add(bukkit);
+            }
+
+            @Override
+            public void onProfileLookupFailed(GameProfile gameProfile, Exception e) {
+                if (e instanceof ProfileNotFoundException) return;
+                Preconditions.checkNotNull(gameProfile.getName(), "Can't have a null name");
+                String name = gameProfile.getName();
+                Bukkit.getLogger().log(Level.WARNING, "Unable to lookup profiles for {0} with the name {1}: {2}", new Object[]{calling.getSimpleName(), name, e.getMessage()});
+            }
+        });
+        return properties;
+    }
+
+    @Override
+    public PlayerProfile lookup(UUID id) {
+        Preconditions.checkNotNull(id, "No null ids");
+        try {
+            GameProfile nms = lookupProperties(id);
+            return ProfileHelper.toBukkit(nms);
+        } catch (Exception e) {
+            Class<?> caller = getCallerClass();
+            String msg = MessageFormat.format("Could not fetch id for {0} with id {1}", caller.getSimpleName(), id);
+            Bukkit.getLogger().log(Level.WARNING, msg, e);
+            return null;
+        }
+    }
+
+    @Override
+    public void lookupProperties(PlayerProfile profile) {
+        Preconditions.checkNotNull(profile, "No null profiles");
+        try {
+            GameProfile nms = lookupProperties(profile.getId());
+            ProfileHelper.copyProperties(nms, profile);
+        } catch (Exception e) {
+            Class<?> caller = getCallerClass();
+            String msg = MessageFormat.format("Could not fetch properties for {0} with name {1} and id {2}", caller.getSimpleName(), profile.getName(), profile.getId());
+            Bukkit.getLogger().log(Level.WARNING, msg, e);
+        }
+    }
+
+    private GameProfile lookupProperties(UUID id) throws IOException {
+        Response response = MojangNameLookup.lookupNameFromMojang(id);
+        GameProfile nms = ProfileHelper.toNMS(response);
+        return nms;
+    }
+
+    // Equals and hashcode
+
+    @Override
+    public boolean equals(Object other) {
+        return (other instanceof ProfileLookup && equalsNoOther((ProfileLookup) other)) || other.equals(this);
+    }
+
+    @Override
+    public boolean equalsNoOther(ProfileLookup other) {
+        return other instanceof MojangProfileLookup;
+    }
+
+    @Override
+    public int hashCode() {
+        return 0xF55CDA65; // Same for all mojang profile lookups
+    }
+
+    private static AtomicReference<Class<?>> sunReflectClass;
+    private static AtomicReference<Method> getCallerClassMethod;
+
+    public static Class<?> getCallerClass() {
+        return getCallerClass(3); // us, our calling class, their calling class
+    }
+
+    /**
+     * Get the calling class
+     *
+     * <p>
+     * The index is 0 based, where 0 is this method, and 1 is the caller
+     * </p>
+     *
+     * @param index the index on the stack to get
+     * @return the class at the specified point on the stack
+     */
+    public static Class<?> getCallerClass(int index) {
+        Class<?> sunReflectClass;
+        if (MojangProfileLookup.sunReflectClass == null) {
+            MojangProfileLookup.sunReflectClass = new AtomicReference<Class<?>>();
+            try {
+                sunReflectClass = Class.forName("sun.reflect.Reflection");
+                MojangProfileLookup.sunReflectClass.set(sunReflectClass);
+            } catch (ClassNotFoundException e) {
+                MojangProfileLookup.sunReflectClass.set(null);
+                sunReflectClass = null;
+            }
+        } else {
+            sunReflectClass = MojangProfileLookup.sunReflectClass.get();
+        }
+        if (sunReflectClass != null) {
+            if (getCallerClassMethod == null) {
+                getCallerClassMethod = new AtomicReference<Method>();
+                try {
+                    Method m = sunReflectClass.getDeclaredMethod("getCallerClass", int.class);
+                    getCallerClassMethod.set(m);
+                } catch (NoSuchMethodException e) {
+                    getCallerClassMethod.set(null);
+                }
+            }
+            Method getCallerClassMethod = MojangProfileLookup.getCallerClassMethod.get();
+            if (getCallerClassMethod != null) {
+                getCallerClassMethod.setAccessible(true);
+                try {
+                    getCallerClassMethod.invoke(null, index + 2); // 2 - sun.reflect.Reflection, getCallerClass(I)
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException("Unable to setAccessible()", e);
+                } catch (InvocationTargetException e) {
+                    throw new RuntimeException("sun.reflect.Reflection.getCallerClass threw an exception", e);
+                }
+            }
+        }
+        StackTraceElement[] stack = new Throwable().getStackTrace();
+        int currentIndex = 0;
+        for (StackTraceElement element : stack) {
+            if (currentIndex == 0 && !element.getMethodName().equals("getCallerClass") || !element.getClassName().equals(MojangProfileLookup.class.getName())) {
+                currentIndex = 0; // We aren't on the current method yet
+                continue;
+            }
+            // By here 0 is the current method
+            if (currentIndex == index) {
+                try {
+                    return Class.forName(element.getClassName());
+                } catch (ClassNotFoundException e) {
+                    throw new RuntimeException("Unable to find calling class for stack: " + element, e);
+                }
+            }
+            currentIndex++;
+        }
+        throw new IndexOutOfBoundsException("Ran out of methods on the stack");
+    }
+
+}
diff --git a/src/main/java/net/techcable/tacospigot/uuid/ProfileHelper.java b/src/main/java/net/techcable/tacospigot/uuid/ProfileHelper.java
new file mode 100644
index 0000000..ed71343
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/uuid/ProfileHelper.java
@@ -0,0 +1,98 @@
+package net.techcable.tacospigot.uuid;
+
+import java.util.Map.Entry;
+import java.util.UUID;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.util.MojangNameLookup.Response;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+
+public class ProfileHelper {
+
+    public static PlayerProfile toBukkit(GameProfile nms) {
+        PlayerProfile bukkit = new PlayerProfile(nms.getId(), nms.getName());
+        copyProperties(nms, bukkit);
+        return bukkit;
+    }
+
+    public static void copyProperties(GameProfile nms, PlayerProfile bukkit) {
+        if (nms.getProperties() != null) {
+            for (Entry<String, Property> entry : nms.getProperties().entries()) {
+                Property property = entry.getValue();
+                bukkit.getProperties().addProperty(toBukkit(property));
+            }
+        }
+    }
+
+    public static void copyProperties(PlayerProfile bukkit, GameProfile nms) {
+        if (bukkit.hasProperties()) {
+            for (Entry<String, net.techcable.tacospigot.uuid.Property> entry : bukkit.getProperties().asMap().entries()) {
+                net.techcable.tacospigot.uuid.Property property = entry.getValue();
+                nms.getProperties().put(property.getName(), toNms(property));
+            }
+        }
+    }
+
+    public static net.techcable.tacospigot.uuid.Property toBukkit(Property nms) {
+        return new net.techcable.tacospigot.uuid.Property(nms.getName(), nms.getValue(), nms.getSignature());
+    }
+
+    public static Property toNms(net.techcable.tacospigot.uuid.Property bukkit) {
+        return new Property(bukkit.getName(), bukkit.getValue(), bukkit.getSignature());
+    }
+
+    public static GameProfile toNMS(Response response) {
+        UUID id = UUID.fromString(response.id);
+        GameProfile nms = new GameProfile(id, response.name);
+        if (response.properties != null) {
+            for (JsonElement element : response.properties) {
+                if (!element.isJsonObject()) throw new IllegalArgumentException(element + " is not an object");
+                JsonObject rawProperety = element.getAsJsonObject();
+                if (rawProperety.get("name") == null) throw new IllegalArgumentException("Unamed property: " + rawProperety);
+                if (!rawProperety.get("name").isJsonPrimitive() || !rawProperety.getAsJsonPrimitive("name").isString()) throw new IllegalArgumentException("name is not a string: " + rawProperety.get("name"));
+                String name = rawProperety.getAsJsonPrimitive("name").getAsString();
+                if (rawProperety.get("value") == null) throw new IllegalArgumentException("No-value property: " + rawProperety);
+                if (!rawProperety.get("value").isJsonPrimitive() || !rawProperety.getAsJsonPrimitive("value").isString()) throw new IllegalArgumentException("value is not a string: " + rawProperety.get("value"));
+                String value = rawProperety.getAsJsonPrimitive("value").getAsString();
+                String signature = null;
+                if (rawProperety.get("signature") != null) {
+                    if (!rawProperety.get("signature").isJsonPrimitive() || !rawProperety.getAsJsonPrimitive("signature").isString()) throw new IllegalArgumentException("signature is not a string: " + rawProperety.get("signature"));
+                    signature = rawProperety.getAsJsonPrimitive("signature").getAsString();
+                }
+                Property property = new Property(name, value, signature);
+                nms.getProperties().put(name, property);
+            }
+        }
+        return nms;
+    }
+
+    public static GameProfile toNms(PlayerProfile bukkit) {
+        GameProfile nms = new GameProfile(bukkit.getId(), bukkit.getName());
+        copyProperties(bukkit, nms);
+        return nms;
+    }
+
+    public static GameProfile lookupNms(UUID id) {
+        PlayerProfile profile = Bukkit.getServer().getLookup().lookup(id);
+        if (profile == null) return null;
+        return toNms(profile);
+    }
+
+    public static GameProfile lookupNms(String name) {
+        PlayerProfile profile = Bukkit.getServer().getLookup().lookup(name);
+        if (profile == null) return null;
+        return toNms(profile);
+    }
+
+    public static void fillProperties(GameProfile profile) {
+        if (profile == null) return;
+        PlayerProfile bukkit = toBukkit(profile);
+        Bukkit.getLookup().lookupProperties(bukkit);
+        copyProperties(bukkit, profile);
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 4521786..260fee9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -11,6 +11,11 @@ import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.WorldNBTStorage;
 
+// TacoSpigot start
+import net.techcable.tacospigot.uuid.PlayerProfile;
+import net.techcable.tacospigot.uuid.ProfileHelper;
+// TacoSpigot end
+
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -39,6 +44,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return profile;
     }
 
+    // TacoSpigot start - profile getter
+    public PlayerProfile getPlayerProfile() {
+        return ProfileHelper.toBukkit(getProfile());
+    }
+    // TacoSpigot end
+
     public boolean isOnline() {
         return getPlayer() != null;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dad0e33..aeb684d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -74,7 +74,6 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.event.world.WorldInitEvent;
 import org.bukkit.event.world.WorldLoadEvent;
-import org.bukkit.event.world.WorldSaveEvent;
 import org.bukkit.event.world.WorldUnloadEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
@@ -124,6 +123,13 @@ import io.netty.handler.codec.base64.Base64;
 import jline.console.ConsoleReader;
 import net.md_5.bungee.api.chat.BaseComponent;
 
+// TacoSpigot start
+import net.techcable.tacospigot.TacoSpigotConfig;
+import net.techcable.tacospigot.uuid.CachingLookup;
+import net.techcable.tacospigot.uuid.MojangProfileLookup;
+import net.techcable.tacospigot.uuid.ProfileLookup;
+// TacoSpigot end
+
 public final class CraftServer implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
     private final String serverName = "CraftBukkit";
@@ -1747,4 +1753,27 @@ public final class CraftServer implements Server {
     {
         return spigot;
     }
+
+    // TacoSpigot start - add uuid api
+
+    private final ProfileLookup mojangLookup = new MojangProfileLookup();
+    private volatile ProfileLookup lookup = TacoSpigotConfig.uuidCacheEnabled ? new CachingLookup(mojangLookup) : mojangLookup; // Mojang is the default, but we should cache if enabled
+
+    @Override
+    public ProfileLookup getLookup() {
+        return lookup;
+    }
+
+    @Override
+    public void setLookup(ProfileLookup lookup) {
+        this.lookup = lookup;
+    }
+
+    @Override
+    public ProfileLookup getMojangLookup() {
+        return mojangLookup;
+    }
+
+    // TacoSpigot end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 8fdfdcf..5ec080d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -25,6 +25,11 @@ import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
 
+// TacoSpigot start
+import net.techcable.tacospigot.uuid.PlayerProfile;
+import net.techcable.tacospigot.uuid.ProfileHelper;
+// TacoSpigot end
+
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.NotImplementedException;
 import org.bukkit.*;
@@ -88,6 +93,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return getHandle().getProfile();
     }
 
+    // TacoSpigot start - add profile getter
+    public PlayerProfile getPlayerProfile() {
+        return ProfileHelper.toBukkit(getProfile());
+    }
+    // TacoSpigot end
+
     @Override
     public boolean isOp() {
         return server.getHandle().isOp(getProfile());
diff --git a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
index 93a8f0b..706334a 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
@@ -2,50 +2,92 @@ package org.bukkit.craftbukkit.util;
 
 import com.google.common.base.Charsets;
 import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonIOException;
+import com.mojang.authlib.yggdrasil.response.Response;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import java.io.IOException;
 import java.io.InputStream;
+
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.UUID;
+
 import org.apache.commons.io.IOUtils;
 
+// TacoSpigot start
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import net.techcable.tacospigot.uuid.PlayerProfile;
+
+import org.bukkit.Bukkit;
+// TacoSpigot end
+
 public class MojangNameLookup {
     private static final Logger logger = LogManager.getFormatterLogger(MojangNameLookup.class);
 
     public static String lookupName(UUID id) {
+        // TacoSpigot start - use uuid api, but add method for raw lookup
+        PlayerProfile profile = Bukkit.getLookup().lookup(id);
+        return profile != null ? profile.getName() : null;
+    }
+
+    public static Response lookupNameFromMojang(UUID id) throws IOException {
+        // TacoSpigot end
         if (id == null) {
             return null;
         }
 
         InputStream inputStream = null;
         try {
-            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + id.toString().replace("-", ""));
+            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + id.toString().replace("-", "") + "?unsigned=false"); // TacoSpigot - sign profile
             URLConnection connection = url.openConnection();
             connection.setConnectTimeout(15000);
             connection.setReadTimeout(15000);
             connection.setUseCaches(false);
             inputStream = connection.getInputStream();
-            String result = IOUtils.toString(inputStream, Charsets.UTF_8);
+            // TacoSpigot start - propagate exceptions
+            Reader reader = new BufferedReader(new InputStreamReader(inputStream));
             Gson gson = new Gson();
-            Response response = gson.fromJson(result, Response.class);
+            Response response = null;
+            try {
+                response = gson.fromJson(reader, Response.class);
+            } catch (Throwable t) {
+                if (t.getCause() instanceof IOException) throw (IOException) t.getCause();
+                throw new IOException("Unable to lookup player profile", t);
+            } finally {
+                try {
+                    reader.close();
+                } catch (IOException ignored) {}
+            }
+            /*
             if (response == null || response.name == null) {
                 logger.warn("Failed to lookup name from UUID");
                 return null;
             }
+            */
+            // TacoSpigot end
 
             if (response.cause != null && response.cause.length() > 0) {
-                logger.warn("Failed to lookup name from UUID: %s", response.errorMessage);
-                return null;
+                // TacoSpigot start - Throw Exception
+                throw new IOException("Failed to lookup profile from UUID: " + response.errorMessage);
+                // return null;
+                // TacoSpigot end
             }
 
-            return response.name;
+            return response; // TacoSpigot
         } catch (MalformedURLException ex) {
             logger.warn("Malformed URL in UUID lookup");
             return null;
+            // TacoSpigot start - throw exception
+        }
+        /*
         } catch (IOException ex) {
             IOUtils.closeQuietly(inputStream);
         } finally {
@@ -53,11 +95,17 @@ public class MojangNameLookup {
         }
 
         return null;
+        */
+        // TacoSpigot end
     }
 
-    private class Response {
-        String errorMessage;
-        String cause;
-        String name;
+    // TacoSpigot start - make public
+    public class Response {
+        public String id;
+        public JsonArray properties;
+        public String errorMessage;
+        public String cause;
+        public String name;
+        // TacoSpigot end
     }
 }
-- 
2.4.6.windows.1

