From d8de7c5061885aea30294ec4ff8c34cf74b6efad Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Thu, 21 Jan 2016 15:58:33 -0700
Subject: [PATCH] Speedup 'BlockPos', by fixing inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This aproach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

In addition, this patch moves the validity checking code from World.isValidLocation(), to BlockPosition.isValid().

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my mircorbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index 8e16155..c1f212f 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -5,9 +5,11 @@ import com.google.common.base.Objects;
 public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     public static final BaseBlockPosition ZERO = new BaseBlockPosition(0, 0, 0);
-    private final int a;
-    private final int c;
-    private final int d;
+    // TacoSpigot start - make mutable and protected for MutableBlockPos
+    protected int a;
+    protected int c;
+    protected int d;
+    // TacoSpigot end
 
     public BaseBlockPosition(int i, int j, int k) {
         this.a = i;
@@ -39,17 +41,19 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
     }
 
-    public int getX() {
+    // TacoSpigot start - only allow one implementation of these methods (make final)
+    public final int getX() {
         return this.a;
     }
 
-    public int getY() {
+    public final int getY() {
         return this.c;
     }
 
-    public int getZ() {
+    public final int getZ() {
         return this.d;
     }
+    // TacoSpigot end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
         return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 2bd5499..fa3c881 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -198,9 +198,9 @@ public class BlockPosition extends BaseBlockPosition {
                                 ++k;
                             }
 
-                            this.b.c = i;
-                            this.b.d = j;
-                            this.b.e = k;
+                            this.b.setX(i);
+                            this.b.setY(j);
+                            this.b.setZ(k);
                             return this.b;
                         }
                     }
@@ -217,11 +217,57 @@ public class BlockPosition extends BaseBlockPosition {
         return this.c(baseblockposition);
     }
 
-    public static final class MutableBlockPosition extends BlockPosition {
+    // TacoSpigot start - validation code
+    /**
+     * This is the maximum x/z position the server can handle.
+     * <p/>
+     * This value is exclusive, meaning only values less than it are valid.
+     * <p>
+     * It has been taken from 'World.isValidLocation()'
+     */
+    public static final int MAX_POSITION = 30000000;
+
+    /**
+     * This is the minimum x/z position the server can handle
+     * <p/>
+     * This value is inclusive, meaning it is also a valid value.
+     * In other words, check for greater than or equal to.
+     * <p/>
+     * It has been taken from 'World.isValidLocation()'
+     */
+    public static final int MIN_POSITION = MAX_POSITION * -1;
+
+    public boolean isValid() {
+        return this.isValidY() && getX() >= MIN_POSITION && getZ() <= MIN_POSITION && getX() < MAX_POSITION && getZ() < MAX_POSITION;
+    }
+
+    public boolean isValidY() {
+        return getY() >= 0 && getY() < 256;
+    }
+    // TacoSpigot end
 
+    public static final class MutableBlockPosition extends BlockPosition {
+        // TacoSpigot start - remove our overriding variables
+        /*
         private int c;
         private int d;
         private int e;
+        */
+
+        public void setX(int x) {
+            ((BaseBlockPosition) this).a = x;
+        }
+
+
+        public void setY(int y) {
+            ((BaseBlockPosition) this).c = y;
+        }
+
+
+        public void setZ(int z) {
+            ((BaseBlockPosition) this).d = z;
+        }
+        // TacoSpigot end
 
         public MutableBlockPosition() {
             this(0, 0, 0);
@@ -229,11 +275,13 @@ public class BlockPosition extends BaseBlockPosition {
 
         public MutableBlockPosition(int i, int j, int k) {
             super(0, 0, 0);
-            this.c = i;
-            this.d = j;
-            this.e = k;
+            // TacoSpigot start - modify base x,y,z
+            this.setX(i);
+            this.setY(j);
+            this.setY(k);
         }
 
+        /*
         public int getX() {
             return this.c;
         }
@@ -245,11 +293,13 @@ public class BlockPosition extends BaseBlockPosition {
         public int getZ() {
             return this.e;
         }
+        */
 
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
-            this.c = i;
-            this.d = j;
-            this.e = k;
+            setX(i);
+            setX(j);
+            setX(k);
+            // TacoSpigot end
             return this;
         }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 37adb1a..2fe0ebc 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -286,7 +286,10 @@ public abstract class World implements IBlockAccess {
     }
 
     private boolean isValidLocation(BlockPosition blockposition) {
-        return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < 256;
+        // TacoSpigot start - delegate to BlockPosition.isValid()
+        return blockposition.isValid();
+        // return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < 256;
+        // TacoSpigot end
     }
 
     public boolean isEmpty(BlockPosition blockposition) {
-- 
2.7.0

