From c3ca4bc4f2f01036708e05c46ae6519ad28fe304 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Mon, 5 Oct 2015 22:43:57 -0700
Subject: [PATCH] Optimize X-Ray

Checks for adjacent blocks should be way faster

diff --git a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
new file mode 100644
index 0000000..8098bfc
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
@@ -0,0 +1,36 @@
+package net.techcable.tacospigot.utils;
+
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+
+import net.minecraft.server.BlockPosition;
+
+public class BlockHelper {
+    private BlockHelper() {}
+
+    public static void forEachAdjacentBlock(BlockPosition position, int radius, Consumer<BlockPosition> action) {
+        // Hax
+        isAllAdjacentBlocksFillPredicate(position, radius, (pos) -> {
+            action.accept(pos);
+            return true;
+        });
+    }
+
+    public static boolean isAllAdjacentBlocksFillPredicate(BlockPosition position, int radius, Predicate<BlockPosition> predicate) {
+        int startX = position.getX() - radius;
+        int endX = position.getX() + radius;
+        int startY = Math.max(0, position.getY() - radius);
+        int endY = Math.min(255, position.getY() + radius);
+        int startZ = position.getZ() - radius;
+        int endZ = position.getZ() + radius;
+        for (int x = startX; x <= endX; x++) {
+            for (int y = startY; y <= endY; y++) {
+                for (int z = startZ; z <= endZ; z++) {
+                    BlockPosition adjacent = new BlockPosition(x, y, z);
+                    if (!predicate.test(adjacent)) return false;
+                }
+            }
+        }
+        return true;
+    }
+}
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index 5466a61..31b670e 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -12,6 +12,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import java.util.HashSet;
 import java.util.Set;
 // PaperSpigot end
+// TacoSpigot start
+import net.techcable.tacospigot.utils.BlockHelper;
+// TacoSpigot end
 
 public class AntiXray
 {
@@ -160,7 +163,7 @@ public class AntiXray
                                 }
                                 // Grab the block ID in the buffer.
                                 // TODO: extended IDs are not yet supported
-                                int blockId = (buffer[index << 1] & 0xFF) 
+                                int blockId = (buffer[index << 1] & 0xFF)
                                         | ((buffer[(index << 1) + 1] & 0xFF) << 8);
                                 blockId >>>= 4;
                                 // Check if the block should be obfuscated
@@ -206,7 +209,15 @@ public class AntiXray
         }
     }
 
-    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf)
+    // TacoSpigot start
+    private void updateNearbyBlocks(World world, BlockPosition startPos, int radius, boolean updateSelf) {
+        BlockHelper.forEachAdjacentBlock(startPos, radius, (pos) -> {
+            if (!updateSelf && pos.equals(startPos)) return;
+            updateBlock(world, pos);
+        });
+    }
+
+    private void updateBlock(World world, BlockPosition position)
     {
         // If the block in question is loaded
         if ( world.isLoaded( position ) )
@@ -215,12 +226,14 @@ public class AntiXray
             Block block = world.getType(position).getBlock();
 
             // See if it needs update
-            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
+            if ( obfuscateBlocks[Block.getId( block )] ) // TacoSpigot - always update
             {
                 // Send the update
                 world.notify( position );
             }
 
+            // TacoSpigot start
+            /*
             // Check other blocks for updates
             if ( radius > 0 )
             {
@@ -231,31 +244,24 @@ public class AntiXray
                 updateNearbyBlocks( world, position.south(), radius - 1, true );
                 updateNearbyBlocks( world, position.north(), radius - 1, true );
             }
+            */
+            // TacoSpigot end
         }
     }
 
     private static boolean isLoaded(World world, BlockPosition position, int radius)
     {
-        return world.isLoaded( position )
-                && ( radius == 0 ||
-                ( isLoaded( world, position.east(), radius - 1 )
-                && isLoaded( world, position.west(), radius - 1 )
-                && isLoaded( world, position.up(), radius - 1 )
-                && isLoaded( world, position.down(), radius - 1 )
-                && isLoaded( world, position.south(), radius - 1 )
-                && isLoaded( world, position.north(), radius - 1 ) ) );
+        // TacoSpigot start
+        return BlockHelper.isAllAdjacentBlocksFillPredicate(position, radius, world::isLoaded);
+        // TacoSpigot end
     }
 
-    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition position, int radius)
+    // TacoSpigot start
+    private static boolean hasTransparentBlockAdjacent(World world, BlockPosition startPos, int radius)
     {
-        return !isSolidBlock(world.getType(position, false).getBlock()) /* isSolidBlock */
-                || ( radius > 0
-                && ( hasTransparentBlockAdjacent( world, position.east(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.west(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.up(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.down(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.south(), radius - 1 )
-                || hasTransparentBlockAdjacent( world, position.north(), radius - 1 ) ) );
+        // !(solid blocks all around)
+        return !BlockHelper.isAllAdjacentBlocksFillPredicate(startPos, radius, (position) -> isSolidBlock(world.getType(position, false).getBlock())); /* isSolidBlock */
+        // TacoSpigot end
     }
 
     private static boolean isSolidBlock(Block block) {
-- 
2.5.2.windows.2

