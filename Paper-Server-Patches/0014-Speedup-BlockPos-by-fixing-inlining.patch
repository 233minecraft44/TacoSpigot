From d533a57e1aaac7444e991a534b39a9941fad03f9 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Mon, 7 Mar 2016 12:51:01 -0700
Subject: [PATCH] Speedup BlockPos by fixing inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my mircorbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index f772c7c..4cbe5ed 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -7,11 +7,13 @@ import javax.annotation.concurrent.Immutable;
 public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     public static final BaseBlockPosition ZERO = new BaseBlockPosition(0, 0, 0);
-    private final int a;
-    private final int b;
-    private final int c;
+    // TacoSpigot start - make mutable and protected for MutableBlockPos and PooledBlockPos
+    protected int a;
+    protected int b;
+    protected int c;
+    // TacoSpigot end
     // Paper start
-    public boolean isValidLocation() {
+    public final boolean isValidLocation() { // TacoSpigot - final for no overrides
         return a >= -30000000 && c >= -30000000 && a < 30000000 && c < 30000000 && b >= 0 && b < 256;
     }
     public boolean isInvalidYLocation() {
@@ -49,17 +51,19 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
     }
 
-    public int getX() {
+    // TacoSpigot start - Only allow one implementation of these methods (make final)
+    public final int getX() {
         return this.a;
     }
 
-    public int getY() {
+    public final int getY() {
         return this.b;
     }
 
-    public int getZ() {
+    public final int getZ() {
         return this.c;
     }
+    // TacoSpigot end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
         return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 5bbaa87..f3f4806 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -236,10 +236,11 @@ public class BlockPosition extends BaseBlockPosition {
                                 ++k;
                             }
                             // Paper end
-
-                            this.b.b = i;
-                            this.b.c = j;
-                            this.b.d = k;
+                            // TacoSpigot start - modify base position variables
+                            ((BaseBlockPosition) this.b).a = i;
+                            ((BaseBlockPosition) this.b).b = j;
+                            ((BaseBlockPosition) this.b).c = k;
+                            // TacoSpigot end
                             return this.b;
                         }
                     }
@@ -353,6 +354,8 @@ public class BlockPosition extends BaseBlockPosition {
 
     public static class MutableBlockPosition extends BlockPosition {
 
+        // TacoSpigot start - remove variables and isValidLocation
+        /*
         protected int b;
         protected int c;
         protected int d;
@@ -366,6 +369,8 @@ public class BlockPosition extends BaseBlockPosition {
             return c < 0 || c >= 256;
         }
         // Paper end
+        */
+        // TacoSpigot end
 
         public MutableBlockPosition() {
             this(0, 0, 0);
@@ -377,11 +382,15 @@ public class BlockPosition extends BaseBlockPosition {
 
         public MutableBlockPosition(int i, int j, int k) {
             super(0, 0, 0);
-            this.b = i;
-            this.c = j;
-            this.d = k;
+            // TacoSpigot start - modify base position variables
+            ((BaseBlockPosition) this).a = i;
+            ((BaseBlockPosition) this).b = j;
+            ((BaseBlockPosition) this).c = k;
+            // TacoSpigot end
         }
 
+        // TacoSpigot start - use superclass methods
+        /*
         public int getX() {
             return this.b;
         }
@@ -393,12 +402,16 @@ public class BlockPosition extends BaseBlockPosition {
         public int getZ() {
             return this.d;
         }
+        */
+        // TacoSpigot end
 
         public void setValues(int x, int y, int z) { c(x, y, z); } // Paper - OBFHELPER
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
-            this.b = i;
-            this.c = j;
-            this.d = k;
+            // TacoSpigot start - modify base position variables
+            ((BaseBlockPosition) this).a = i;
+            ((BaseBlockPosition) this).b = j;
+            ((BaseBlockPosition) this).c = k;
+            // TacoSpigot end
             return this;
         }
 
@@ -415,11 +428,11 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
-            return this.c(this.b + enumdirection.getAdjacentX() * i, this.c + enumdirection.getAdjacentY() * i, this.d + enumdirection.getAdjacentZ() * i);
+            return this.c(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i); // TacoSpigot - USE THE BLEEPING GETTERS
         }
 
         public void p(int i) {
-            this.c = i;
+            ((BaseBlockPosition) this).b = i; // TacoSpigot - modify base variable
         }
 
         public BlockPosition h() {
-- 
2.9.0

